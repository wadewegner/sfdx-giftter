//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class GiphyResponse {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Meta {
		public Integer status {get;set;} 
		public String msg {get;set;} 
		public String response_id {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getIntegerValue();
						} else if (text == 'msg') {
							msg = parser.getText();
						} else if (text == 'response_id') {
							response_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GiphyResponse {
		public List<Data> data {get;set;} 
		public Pagination pagination {get;set;} 
		public Meta meta {get;set;} 

		public GiphyResponse(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = new List<Data>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								data.add(new Data(parser));
							}
						} else if (text == 'pagination') {
							pagination = new Pagination(parser);
						} else if (text == 'meta') {
							meta = new Meta(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GiphyResponse consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fixed_height_downsampled {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 
		public String size {get;set;} 
		public String webp {get;set;} 
		public String webp_size {get;set;} 

		public Fixed_height_downsampled(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'webp') {
							webp = parser.getText();
						} else if (text == 'webp_size') {
							webp_size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Fixed_height_downsampled consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Original_Z {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 
		public String size {get;set;} 
		public String frames {get;set;} 
		public String mp4 {get;set;} 
		public String mp4_size {get;set;} 
		public String webp {get;set;} 
		public String webp_size {get;set;} 
		public String hash {get;set;} 

		public Original_Z(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'frames') {
							frames = parser.getText();
						} else if (text == 'mp4') {
							mp4 = parser.getText();
						} else if (text == 'mp4_size') {
							mp4_size = parser.getText();
						} else if (text == 'webp') {
							webp = parser.getText();
						} else if (text == 'webp_size') {
							webp_size = parser.getText();
						} else if (text == 'hash') {
							hash = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Original_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fixed_width {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 
		public String size {get;set;} 
		public String mp4 {get;set;} 
		public String mp4_size {get;set;} 
		public String webp {get;set;} 
		public String webp_size {get;set;} 

		public Fixed_width(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'mp4') {
							mp4 = parser.getText();
						} else if (text == 'mp4_size') {
							mp4_size = parser.getText();
						} else if (text == 'webp') {
							webp = parser.getText();
						} else if (text == 'webp_size') {
							webp_size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Fixed_width consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Images {
		public Fixed_height_still fixed_height_still {get;set;} 
		public Fixed_height_still original_still {get;set;} 
		public Fixed_width fixed_width {get;set;} 
		public Fixed_height_still fixed_height_small_still {get;set;} 
		public Fixed_height_downsampled fixed_height_downsampled {get;set;} 
		public Preview preview {get;set;} 
		public Fixed_width fixed_height_small {get;set;} 
		public Downsized_still downsized_still {get;set;} 
		public Downsized_still downsized {get;set;} 
		public Downsized_still downsized_large {get;set;} 
		public Fixed_height_still fixed_width_small_still {get;set;} 
		public Downsized_still preview_webp {get;set;} 
		public Fixed_height_still fixed_width_still {get;set;} 
		public Fixed_width fixed_width_small {get;set;} 
		public Preview downsized_small {get;set;} 
		public Fixed_height_downsampled fixed_width_downsampled {get;set;} 
		public Downsized_still downsized_medium {get;set;} 
		public Original original {get;set;} 
		public Fixed_width fixed_height {get;set;} 
		public Looping looping {get;set;} 
		public Preview original_mp4 {get;set;} 
		public Downsized_still preview_gif {get;set;} 
		public Fixed_height_still 480w_still {get;set;} 

		public Images(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'fixed_height_still') {
							fixed_height_still = new Fixed_height_still(parser);
						} else if (text == 'original_still') {
							original_still = new Fixed_height_still(parser);
						} else if (text == 'fixed_width') {
							fixed_width = new Fixed_width(parser);
						} else if (text == 'fixed_height_small_still') {
							fixed_height_small_still = new Fixed_height_still(parser);
						} else if (text == 'fixed_height_downsampled') {
							fixed_height_downsampled = new Fixed_height_downsampled(parser);
						} else if (text == 'preview') {
							preview = new Preview(parser);
						} else if (text == 'fixed_height_small') {
							fixed_height_small = new Fixed_width(parser);
						} else if (text == 'downsized_still') {
							downsized_still = new Downsized_still(parser);
						} else if (text == 'downsized') {
							downsized = new Downsized_still(parser);
						} else if (text == 'downsized_large') {
							downsized_large = new Downsized_still(parser);
						} else if (text == 'fixed_width_small_still') {
							fixed_width_small_still = new Fixed_height_still(parser);
						} else if (text == 'preview_webp') {
							preview_webp = new Downsized_still(parser);
						} else if (text == 'fixed_width_still') {
							fixed_width_still = new Fixed_height_still(parser);
						} else if (text == 'fixed_width_small') {
							fixed_width_small = new Fixed_width(parser);
						} else if (text == 'downsized_small') {
							downsized_small = new Preview(parser);
						} else if (text == 'fixed_width_downsampled') {
							fixed_width_downsampled = new Fixed_height_downsampled(parser);
						} else if (text == 'downsized_medium') {
							downsized_medium = new Downsized_still(parser);
						} else if (text == 'original') {
							original = new Original(parser);
						} else if (text == 'fixed_height') {
							fixed_height = new Fixed_width(parser);
						} else if (text == 'looping') {
							looping = new Looping(parser);
						} else if (text == 'original_mp4') {
							original_mp4 = new Preview(parser);
						} else if (text == 'preview_gif') {
							preview_gif = new Downsized_still(parser);
						} else if (text == '480w_still') {
							480w_still = new Fixed_height_still(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Images consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Preview {
		public String width {get;set;} 
		public String height {get;set;} 
		public String mp4 {get;set;} 
		public String mp4_size {get;set;} 

		public Preview(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'mp4') {
							mp4 = parser.getText();
						} else if (text == 'mp4_size') {
							mp4_size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Preview consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Looping {
		public String mp4 {get;set;} 
		public String mp4_size {get;set;} 

		public Looping(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'mp4') {
							mp4 = parser.getText();
						} else if (text == 'mp4_size') {
							mp4_size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Looping consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String type_Z {get;set;} // in json: type
		public String id {get;set;} 
		public String slug {get;set;} 
		public String url {get;set;} 
		public String bitly_gif_url {get;set;} 
		public String bitly_url {get;set;} 
		public String embed_url {get;set;} 
		public String username {get;set;} 
		public String source {get;set;} 
		public String rating {get;set;} 
		public String content_url {get;set;} 
		public String source_tld {get;set;} 
		public String source_post_url {get;set;} 
		public Integer is_indexable {get;set;} 
		public Integer is_sticker {get;set;} 
		public String import_datetime {get;set;} 
		public String trending_datetime {get;set;} 
		public Images images {get;set;} 
		public String title {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'slug') {
							slug = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'bitly_gif_url') {
							bitly_gif_url = parser.getText();
						} else if (text == 'bitly_url') {
							bitly_url = parser.getText();
						} else if (text == 'embed_url') {
							embed_url = parser.getText();
						} else if (text == 'username') {
							username = parser.getText();
						} else if (text == 'source') {
							source = parser.getText();
						} else if (text == 'rating') {
							rating = parser.getText();
						} else if (text == 'content_url') {
							content_url = parser.getText();
						} else if (text == 'source_tld') {
							source_tld = parser.getText();
						} else if (text == 'source_post_url') {
							source_post_url = parser.getText();
						} else if (text == 'is_indexable') {
							is_indexable = parser.getIntegerValue();
						} else if (text == 'is_sticker') {
							is_sticker = parser.getIntegerValue();
						} else if (text == 'import_datetime') {
							import_datetime = parser.getText();
						} else if (text == 'trending_datetime') {
							trending_datetime = parser.getText();
						} else if (text == 'images') {
							images = new Images(parser);
						} else if (text == 'title') {
							title = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Images_Z {
		public Downsized_still fixed_height_still {get;set;} 
		public Downsized_still original_still {get;set;} 
		public Fixed_width fixed_width {get;set;} 
		public Downsized_still fixed_height_small_still {get;set;} 
		public Fixed_height_downsampled fixed_height_downsampled {get;set;} 
		public Preview preview {get;set;} 
		public Fixed_width fixed_height_small {get;set;} 
		public Downsized_still downsized_still {get;set;} 
		public Downsized_still downsized {get;set;} 
		public Downsized_still downsized_large {get;set;} 
		public Downsized_still fixed_width_small_still {get;set;} 
		public Downsized_still preview_webp {get;set;} 
		public Downsized_still fixed_width_still {get;set;} 
		public Fixed_width fixed_width_small {get;set;} 
		public Preview downsized_small {get;set;} 
		public Fixed_height_downsampled fixed_width_downsampled {get;set;} 
		public Downsized_still downsized_medium {get;set;} 
		public Original_Z original {get;set;} 
		public Fixed_width fixed_height {get;set;} 
		public Looping looping {get;set;} 
		public Preview original_mp4 {get;set;} 
		public Downsized_still preview_gif {get;set;} 
		public Fixed_height_still 480w_still {get;set;} 

		public Images_Z(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'fixed_height_still') {
							fixed_height_still = new Downsized_still(parser);
						} else if (text == 'original_still') {
							original_still = new Downsized_still(parser);
						} else if (text == 'fixed_width') {
							fixed_width = new Fixed_width(parser);
						} else if (text == 'fixed_height_small_still') {
							fixed_height_small_still = new Downsized_still(parser);
						} else if (text == 'fixed_height_downsampled') {
							fixed_height_downsampled = new Fixed_height_downsampled(parser);
						} else if (text == 'preview') {
							preview = new Preview(parser);
						} else if (text == 'fixed_height_small') {
							fixed_height_small = new Fixed_width(parser);
						} else if (text == 'downsized_still') {
							downsized_still = new Downsized_still(parser);
						} else if (text == 'downsized') {
							downsized = new Downsized_still(parser);
						} else if (text == 'downsized_large') {
							downsized_large = new Downsized_still(parser);
						} else if (text == 'fixed_width_small_still') {
							fixed_width_small_still = new Downsized_still(parser);
						} else if (text == 'preview_webp') {
							preview_webp = new Downsized_still(parser);
						} else if (text == 'fixed_width_still') {
							fixed_width_still = new Downsized_still(parser);
						} else if (text == 'fixed_width_small') {
							fixed_width_small = new Fixed_width(parser);
						} else if (text == 'downsized_small') {
							downsized_small = new Preview(parser);
						} else if (text == 'fixed_width_downsampled') {
							fixed_width_downsampled = new Fixed_height_downsampled(parser);
						} else if (text == 'downsized_medium') {
							downsized_medium = new Downsized_still(parser);
						} else if (text == 'original') {
							original = new Original_Z(parser);
						} else if (text == 'fixed_height') {
							fixed_height = new Fixed_width(parser);
						} else if (text == 'looping') {
							looping = new Looping(parser);
						} else if (text == 'original_mp4') {
							original_mp4 = new Preview(parser);
						} else if (text == 'preview_gif') {
							preview_gif = new Downsized_still(parser);
						} else if (text == '480w_still') {
							480w_still = new Fixed_height_still(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Images_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pagination {
		public Integer total_count {get;set;} 
		public Integer count {get;set;} 
		public Integer offset {get;set;} 

		public Pagination(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else if (text == 'count') {
							count = parser.getIntegerValue();
						} else if (text == 'offset') {
							offset = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Pagination consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Original {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 
		public String size {get;set;} 
		public String frames {get;set;} 
		public String mp4 {get;set;} 
		public String mp4_size {get;set;} 
		public String webp {get;set;} 
		public String webp_size {get;set;} 

		public Original(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'frames') {
							frames = parser.getText();
						} else if (text == 'mp4') {
							mp4 = parser.getText();
						} else if (text == 'mp4_size') {
							mp4_size = parser.getText();
						} else if (text == 'webp') {
							webp = parser.getText();
						} else if (text == 'webp_size') {
							webp_size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Original consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fixed_height_still {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 

		public Fixed_height_still(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Fixed_height_still consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Downsized_still {
		public String url {get;set;} 
		public String width {get;set;} 
		public String height {get;set;} 
		public String size {get;set;} 

		public Downsized_still(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Downsized_still consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static GiphyResponse parse(String json) {
		return new GiphyResponse(System.JSON.createParser(json));
	}
}